{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RestApiService = /*#__PURE__*/(() => {\n  class RestApiService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'https://localhost:7142/api';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        }),\n        'withCredentials': true\n      };\n    } //Dynamisk api forbindelse. metoden bliver kaldt indefra den valgte ts.\n    //Inde i constructoren bliver endpointet kaldt via den valgte url navn.\n    //Det samme gælder id (som udvælger denne specifikke data via dens id) og data til at sige hvilken tabel, der er snakke om.\n\n\n    getDatas(endpoint) {\n      return this.http.get(this.apiUrl + endpoint).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getData(id, endpoint) {\n      return this.http.get(this.apiUrl + endpoint + '/' + id).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getDataByEmail(email, endpoint) {\n      return this.http.get(this.apiUrl + endpoint + '/email/' + email).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getDataByEnavn(enavn, endpoint) {\n      return this.http.get(this.apiUrl + endpoint + '/enavn/' + enavn).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getDataByLevel(level, endpoint) {\n      return this.http.get(this.apiUrl + endpoint + '/level/' + level).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getEventDeltagelserByBrugernavn(brugernavn, endpoint) {\n      return this.http.get(this.apiUrl + endpoint + '/brugernavn/' + brugernavn).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getBrugerByEventsTitel(titel, endpoint) {\n      return this.http.get(this.apiUrl + endpoint + '/titel/' + titel).pipe(retry(1), catchError(this.handleError));\n    }\n\n    createData(data, endpoint) {\n      return this.http.post(this.apiUrl + endpoint, JSON.stringify(data), this.httpOptions).pipe(retry(1), catchError(this.handleError));\n    }\n\n    updateData(id, endpoint, data) {\n      return this.http.put(this.apiUrl + endpoint + '/' + id, JSON.stringify(data), this.httpOptions).pipe(retry(1), catchError(this.handleError));\n    }\n\n    deleteData(id, endpoint) {\n      return this.http.delete(this.apiUrl + endpoint + '/' + id, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n    }\n\n    handleError(error) {\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        // Get client-side error\n        errorMessage = error.error.message;\n      } else {\n        // Get server-side error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      window.alert(errorMessage);\n      return throwError(errorMessage);\n    }\n\n  }\n\n  RestApiService.ɵfac = function RestApiService_Factory(t) {\n    return new (t || RestApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  RestApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestApiService,\n    factory: RestApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return RestApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}